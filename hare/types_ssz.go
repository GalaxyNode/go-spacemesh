// Code generated by fastssz. DO NOT EDIT.
package hare

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/spacemeshos/go-spacemesh/common/types"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'Sig'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Sig)

	// Offset (1) 'InnerMsg'
	dst = ssz.WriteOffset(dst, offset)
	if m.InnerMsg == nil {
		m.InnerMsg = new(innerMessage)
	}
	offset += m.InnerMsg.SizeSSZ()

	// Field (0) 'Sig'
	if len(m.Sig) > 256 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, m.Sig...)

	// Field (1) 'InnerMsg'
	if dst, err = m.InnerMsg.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'Sig'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Offset (1) 'InnerMsg'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'Sig'
	{
		buf = tail[o0:o1]
		if len(buf) > 256 {
			return ssz.ErrBytesLength
		}
		if cap(m.Sig) == 0 {
			m.Sig = make([]byte, 0, len(buf))
		}
		m.Sig = append(m.Sig, buf...)
	}

	// Field (1) 'InnerMsg'
	{
		buf = tail[o1:]
		if m.InnerMsg == nil {
			m.InnerMsg = new(innerMessage)
		}
		if err = m.InnerMsg.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'Sig'
	size += len(m.Sig)

	// Field (1) 'InnerMsg'
	if m.InnerMsg == nil {
		m.InnerMsg = new(innerMessage)
	}
	size += m.InnerMsg.SizeSSZ()

	return
}

// MarshalSSZ ssz marshals the certificate object
func (c *certificate) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the certificate object to a target array
func (c *certificate) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'Values'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Values) * 20

	// Offset (1) 'AggMsgs'
	dst = ssz.WriteOffset(dst, offset)
	if c.AggMsgs == nil {
		c.AggMsgs = new(aggregatedMessages)
	}
	offset += c.AggMsgs.SizeSSZ()

	// Field (0) 'Values'
	if len(c.Values) > 1024 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(c.Values); ii++ {
		dst = append(dst, c.Values[ii][:]...)
	}

	// Field (1) 'AggMsgs'
	if dst, err = c.AggMsgs.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the certificate object
func (c *certificate) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'Values'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Offset (1) 'AggMsgs'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'Values'
	{
		buf = tail[o0:o1]
		num, err := ssz.DivideInt2(len(buf), 20, 1024)
		if err != nil {
			return err
		}
		c.Values = make([]types.BlockID, num)
		for ii := 0; ii < num; ii++ {
			copy(c.Values[ii][:], buf[ii*20:(ii+1)*20])
		}
	}

	// Field (1) 'AggMsgs'
	{
		buf = tail[o1:]
		if c.AggMsgs == nil {
			c.AggMsgs = new(aggregatedMessages)
		}
		if err = c.AggMsgs.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the certificate object
func (c *certificate) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'Values'
	size += len(c.Values) * 20

	// Field (1) 'AggMsgs'
	if c.AggMsgs == nil {
		c.AggMsgs = new(aggregatedMessages)
	}
	size += c.AggMsgs.SizeSSZ()

	return
}

// MarshalSSZ ssz marshals the aggregatedMessages object
func (a *aggregatedMessages) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the aggregatedMessages object to a target array
func (a *aggregatedMessages) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Messages'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(a.Messages); ii++ {
		offset += 4
		offset += a.Messages[ii].SizeSSZ()
	}

	// Field (0) 'Messages'
	if len(a.Messages) > 1024 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(a.Messages)
		for ii := 0; ii < len(a.Messages); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += a.Messages[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(a.Messages); ii++ {
		if dst, err = a.Messages[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the aggregatedMessages object
func (a *aggregatedMessages) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Messages'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (0) 'Messages'
	{
		buf = tail[o0:]
		num, err := ssz.DecodeDynamicLength(buf, 1024)
		if err != nil {
			return err
		}
		a.Messages = make([]*Message, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if a.Messages[indx] == nil {
				a.Messages[indx] = new(Message)
			}
			if err = a.Messages[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the aggregatedMessages object
func (a *aggregatedMessages) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Messages'
	for ii := 0; ii < len(a.Messages); ii++ {
		size += 4
		size += a.Messages[ii].SizeSSZ()
	}

	return
}

// MarshalSSZ ssz marshals the innerMessage object
func (i *innerMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the innerMessage object to a target array
func (i *innerMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(31)

	// Field (0) 'Type'
	dst = ssz.MarshalUint8(dst, uint8(i.Type))

	// Field (1) 'InstanceID'
	if dst, err = i.InstanceID.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'K'
	dst = ssz.MarshalUint32(dst, i.K)

	// Field (3) 'Ki'
	dst = ssz.MarshalUint32(dst, i.Ki)

	// Offset (4) 'Values'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(i.Values) * 20

	// Offset (5) 'RoleProof'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(i.RoleProof)

	// Field (6) 'EligibilityCount'
	dst = ssz.MarshalUint16(dst, i.EligibilityCount)

	// Offset (7) 'Svp'
	dst = ssz.WriteOffset(dst, offset)
	if i.Svp == nil {
		i.Svp = new(aggregatedMessages)
	}
	offset += i.Svp.SizeSSZ()

	// Offset (8) 'Cert'
	dst = ssz.WriteOffset(dst, offset)
	if i.Cert == nil {
		i.Cert = new(certificate)
	}
	offset += i.Cert.SizeSSZ()

	// Field (4) 'Values'
	if len(i.Values) > 1024 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(i.Values); ii++ {
		dst = append(dst, i.Values[ii][:]...)
	}

	// Field (5) 'RoleProof'
	if len(i.RoleProof) > 20000 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, i.RoleProof...)

	// Field (7) 'Svp'
	if dst, err = i.Svp.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (8) 'Cert'
	if dst, err = i.Cert.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the innerMessage object
func (i *innerMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 31 {
		return ssz.ErrSize
	}

	tail := buf
	var o4, o5, o7, o8 uint64

	// Field (0) 'Type'
	i.Type = messageType(ssz.UnmarshallUint8(buf[0:1]))

	// Field (1) 'InstanceID'
	if err = i.InstanceID.UnmarshalSSZ(buf[1:5]); err != nil {
		return err
	}

	// Field (2) 'K'
	i.K = ssz.UnmarshallUint32(buf[5:9])

	// Field (3) 'Ki'
	i.Ki = ssz.UnmarshallUint32(buf[9:13])

	// Offset (4) 'Values'
	if o4 = ssz.ReadOffset(buf[13:17]); o4 > size {
		return ssz.ErrOffset
	}

	// Offset (5) 'RoleProof'
	if o5 = ssz.ReadOffset(buf[17:21]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Field (6) 'EligibilityCount'
	i.EligibilityCount = ssz.UnmarshallUint16(buf[21:23])

	// Offset (7) 'Svp'
	if o7 = ssz.ReadOffset(buf[23:27]); o7 > size || o5 > o7 {
		return ssz.ErrOffset
	}

	// Offset (8) 'Cert'
	if o8 = ssz.ReadOffset(buf[27:31]); o8 > size || o7 > o8 {
		return ssz.ErrOffset
	}

	// Field (4) 'Values'
	{
		buf = tail[o4:o5]
		num, err := ssz.DivideInt2(len(buf), 20, 1024)
		if err != nil {
			return err
		}
		i.Values = make([]types.BlockID, num)
		for ii := 0; ii < num; ii++ {
			copy(i.Values[ii][:], buf[ii*20:(ii+1)*20])
		}
	}

	// Field (5) 'RoleProof'
	{
		buf = tail[o5:o7]
		if len(buf) > 20000 {
			return ssz.ErrBytesLength
		}
		if cap(i.RoleProof) == 0 {
			i.RoleProof = make([]byte, 0, len(buf))
		}
		i.RoleProof = append(i.RoleProof, buf...)
	}

	// Field (7) 'Svp'
	{
		buf = tail[o7:o8]
		if i.Svp == nil {
			i.Svp = new(aggregatedMessages)
		}
		if err = i.Svp.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (8) 'Cert'
	{
		buf = tail[o8:]
		if i.Cert == nil {
			i.Cert = new(certificate)
		}
		if err = i.Cert.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the innerMessage object
func (i *innerMessage) SizeSSZ() (size int) {
	size = 31

	// Field (4) 'Values'
	size += len(i.Values) * 20

	// Field (5) 'RoleProof'
	size += len(i.RoleProof)

	// Field (7) 'Svp'
	if i.Svp == nil {
		i.Svp = new(aggregatedMessages)
	}
	size += i.Svp.SizeSSZ()

	// Field (8) 'Cert'
	if i.Cert == nil {
		i.Cert = new(certificate)
	}
	size += i.Cert.SizeSSZ()

	return
}
