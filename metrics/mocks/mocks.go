// Code generated by MockGen. DO NOT EDIT.
// Source: ./metrics.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
	reflect "reflect"
	time "time"
)

// MockMetrics is a mock of Metrics interface
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// StartPushingMetrics mocks base method
func (m *MockMetrics) StartPushingMetrics(url string, periodSec int, nodeID, networkID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartPushingMetrics", url, periodSec, nodeID, networkID)
}

// StartPushingMetrics indicates an expected call of StartPushingMetrics
func (mr *MockMetricsMockRecorder) StartPushingMetrics(url, periodSec, nodeID, networkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPushingMetrics", reflect.TypeOf((*MockMetrics)(nil).StartPushingMetrics), url, periodSec, nodeID, networkID)
}

// StartMetricsServer mocks base method
func (m *MockMetrics) StartMetricsServer(metricsPort int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartMetricsServer", metricsPort)
}

// StartMetricsServer indicates an expected call of StartMetricsServer
func (mr *MockMetricsMockRecorder) StartMetricsServer(metricsPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMetricsServer", reflect.TypeOf((*MockMetrics)(nil).StartMetricsServer), metricsPort)
}

// LayerBlockSize mocks base method
func (m *MockMetrics) LayerBlockSize(block types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LayerBlockSize", block)
}

// LayerBlockSize indicates an expected call of LayerBlockSize
func (mr *MockMetricsMockRecorder) LayerBlockSize(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerBlockSize", reflect.TypeOf((*MockMetrics)(nil).LayerBlockSize), block)
}

// NumTxsInBlock mocks base method
func (m *MockMetrics) NumTxsInBlock(block types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NumTxsInBlock", block)
}

// NumTxsInBlock indicates an expected call of NumTxsInBlock
func (mr *MockMetricsMockRecorder) NumTxsInBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumTxsInBlock", reflect.TypeOf((*MockMetrics)(nil).NumTxsInBlock), block)
}

// BaseBlockExceptionForLength mocks base method
func (m *MockMetrics) BaseBlockExceptionForLength(block types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BaseBlockExceptionForLength", block)
}

// BaseBlockExceptionForLength indicates an expected call of BaseBlockExceptionForLength
func (mr *MockMetricsMockRecorder) BaseBlockExceptionForLength(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseBlockExceptionForLength", reflect.TypeOf((*MockMetrics)(nil).BaseBlockExceptionForLength), block)
}

// BaseBlockExceptionAgainstLength mocks base method
func (m *MockMetrics) BaseBlockExceptionAgainstLength(block types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BaseBlockExceptionAgainstLength", block)
}

// BaseBlockExceptionAgainstLength indicates an expected call of BaseBlockExceptionAgainstLength
func (mr *MockMetricsMockRecorder) BaseBlockExceptionAgainstLength(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseBlockExceptionAgainstLength", reflect.TypeOf((*MockMetrics)(nil).BaseBlockExceptionAgainstLength), block)
}

// BaseBlockExceptionNeutralLength mocks base method
func (m *MockMetrics) BaseBlockExceptionNeutralLength(block types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BaseBlockExceptionNeutralLength", block)
}

// BaseBlockExceptionNeutralLength indicates an expected call of BaseBlockExceptionNeutralLength
func (mr *MockMetricsMockRecorder) BaseBlockExceptionNeutralLength(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseBlockExceptionNeutralLength", reflect.TypeOf((*MockMetrics)(nil).BaseBlockExceptionNeutralLength), block)
}

// LayerDistanceToBaseBlock mocks base method
func (m *MockMetrics) LayerDistanceToBaseBlock(lastLayer, baseBlockLayer types.LayerID, blockID types.BlockID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LayerDistanceToBaseBlock", lastLayer, baseBlockLayer, blockID)
}

// LayerDistanceToBaseBlock indicates an expected call of LayerDistanceToBaseBlock
func (mr *MockMetricsMockRecorder) LayerDistanceToBaseBlock(lastLayer, baseBlockLayer, blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerDistanceToBaseBlock", reflect.TypeOf((*MockMetrics)(nil).LayerDistanceToBaseBlock), lastLayer, baseBlockLayer, blockID)
}

// LayerNumBlocks mocks base method
func (m *MockMetrics) LayerNumBlocks(layer types.LayerID, blockIDs []types.BlockID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LayerNumBlocks", layer, blockIDs)
}

// LayerNumBlocks indicates an expected call of LayerNumBlocks
func (mr *MockMetricsMockRecorder) LayerNumBlocks(layer, blockIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerNumBlocks", reflect.TypeOf((*MockMetrics)(nil).LayerNumBlocks), layer, blockIDs)
}

// BlockBuildDuration mocks base method
func (m *MockMetrics) BlockBuildDuration(layerID types.LayerID, blockID types.BlockID, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BlockBuildDuration", layerID, blockID, duration)
}

// BlockBuildDuration indicates an expected call of BlockBuildDuration
func (mr *MockMetricsMockRecorder) BlockBuildDuration(layerID, blockID, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockBuildDuration", reflect.TypeOf((*MockMetrics)(nil).BlockBuildDuration), layerID, blockID, duration)
}
