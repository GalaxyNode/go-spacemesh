// Code generated by fastssz. DO NOT EDIT.
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the DBBlock object
func (d *DBBlock) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DBBlock object to a target array
func (d *DBBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(28)

	// Field (0) 'ID'
	dst = append(dst, d.ID[:]...)

	// Offset (1) 'Signature'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.Signature)

	// Offset (2) 'MinerID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.MinerID)

	// Field (1) 'Signature'
	if len(d.Signature) > 256 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, d.Signature...)

	// Field (2) 'MinerID'
	if len(d.MinerID) > 256 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, d.MinerID...)

	return
}

// UnmarshalSSZ ssz unmarshals the DBBlock object
func (d *DBBlock) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 28 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2 uint64

	// Field (0) 'ID'
	copy(d.ID[:], buf[0:20])

	// Offset (1) 'Signature'
	if o1 = ssz.ReadOffset(buf[20:24]); o1 > size {
		return ssz.ErrOffset
	}

	// Offset (2) 'MinerID'
	if o2 = ssz.ReadOffset(buf[24:28]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (1) 'Signature'
	{
		buf = tail[o1:o2]
		if len(buf) > 256 {
			return ssz.ErrBytesLength
		}
		if cap(d.Signature) == 0 {
			d.Signature = make([]byte, 0, len(buf))
		}
		d.Signature = append(d.Signature, buf...)
	}

	// Field (2) 'MinerID'
	{
		buf = tail[o2:]
		if len(buf) > 256 {
			return ssz.ErrBytesLength
		}
		if cap(d.MinerID) == 0 {
			d.MinerID = make([]byte, 0, len(buf))
		}
		d.MinerID = append(d.MinerID, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DBBlock object
func (d *DBBlock) SizeSSZ() (size int) {
	size = 28

	// Field (1) 'Signature'
	size += len(d.Signature)

	// Field (2) 'MinerID'
	size += len(d.MinerID)

	return
}

// HashTreeRoot ssz hashes the DBBlock object
func (d *DBBlock) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the DBBlock object with a hasher
func (d *DBBlock) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ID'
	hh.PutBytes(d.ID[:])

	// Field (1) 'Signature'
	if len(d.Signature) > 256 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(d.Signature)

	// Field (2) 'MinerID'
	if len(d.MinerID) > 256 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(d.MinerID)

	hh.Merkleize(indx)
	return
}
