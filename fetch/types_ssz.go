// Code generated by fastssz. DO NOT EDIT.
package fetch

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the requestMessage object
func (r *requestMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the requestMessage object to a target array
func (r *requestMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Offset (0) 'Hint'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(r.Hint)

	// Field (1) 'Hash'
	dst = append(dst, r.Hash[:]...)

	// Field (0) 'Hint'
	if len(r.Hint) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, r.Hint...)

	return
}

// UnmarshalSSZ ssz unmarshals the requestMessage object
func (r *requestMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Hint'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Hash'
	copy(r.Hash[:], buf[4:36])

	// Field (0) 'Hint'
	{
		buf = tail[o0:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(r.Hint) == 0 {
			r.Hint = make([]byte, 0, len(buf))
		}
		r.Hint = append(r.Hint, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the requestMessage object
func (r *requestMessage) SizeSSZ() (size int) {
	size = 36

	// Field (0) 'Hint'
	size += len(r.Hint)

	return
}

// MarshalSSZ ssz marshals the responseMessage object
func (r *responseMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the responseMessage object to a target array
func (r *responseMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'Hash'
	dst = append(dst, r.Hash[:]...)

	// Offset (1) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(r.Data)

	// Field (1) 'Data'
	if len(r.Data) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, r.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the responseMessage object
func (r *responseMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Hash'
	copy(r.Hash[:], buf[0:32])

	// Offset (1) 'Data'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Data'
	{
		buf = tail[o1:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		if cap(r.Data) == 0 {
			r.Data = make([]byte, 0, len(buf))
		}
		r.Data = append(r.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the responseMessage object
func (r *responseMessage) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'Data'
	size += len(r.Data)

	return
}

// MarshalSSZ ssz marshals the requestBatch object
func (r *requestBatch) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the requestBatch object to a target array
func (r *requestBatch) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'ID'
	dst = append(dst, r.ID[:]...)

	// Offset (1) 'Requests'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(r.Requests); ii++ {
		offset += 4
		offset += r.Requests[ii].SizeSSZ()
	}

	// Field (1) 'Requests'
	if len(r.Requests) > 4096 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(r.Requests)
		for ii := 0; ii < len(r.Requests); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += r.Requests[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(r.Requests); ii++ {
		if dst, err = r.Requests[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the requestBatch object
func (r *requestBatch) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'ID'
	copy(r.ID[:], buf[0:32])

	// Offset (1) 'Requests'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Requests'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 4096)
		if err != nil {
			return err
		}
		r.Requests = make([]*requestMessage, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if r.Requests[indx] == nil {
				r.Requests[indx] = new(requestMessage)
			}
			if err = r.Requests[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the requestBatch object
func (r *requestBatch) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'Requests'
	for ii := 0; ii < len(r.Requests); ii++ {
		size += 4
		size += r.Requests[ii].SizeSSZ()
	}

	return
}

// MarshalSSZ ssz marshals the responseBatch object
func (r *responseBatch) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the responseBatch object to a target array
func (r *responseBatch) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'ID'
	dst = append(dst, r.ID[:]...)

	// Offset (1) 'Responses'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(r.Responses); ii++ {
		offset += 4
		offset += r.Responses[ii].SizeSSZ()
	}

	// Field (1) 'Responses'
	if len(r.Responses) > 1024 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(r.Responses)
		for ii := 0; ii < len(r.Responses); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += r.Responses[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(r.Responses); ii++ {
		if dst, err = r.Responses[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the responseBatch object
func (r *responseBatch) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'ID'
	copy(r.ID[:], buf[0:32])

	// Offset (1) 'Responses'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Responses'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 1024)
		if err != nil {
			return err
		}
		r.Responses = make([]*responseMessage, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if r.Responses[indx] == nil {
				r.Responses[indx] = new(responseMessage)
			}
			if err = r.Responses[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the responseBatch object
func (r *responseBatch) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'Responses'
	for ii := 0; ii < len(r.Responses); ii++ {
		size += 4
		size += r.Responses[ii].SizeSSZ()
	}

	return
}
