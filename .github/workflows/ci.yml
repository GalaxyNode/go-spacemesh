name: CI

env:
  go-version: '1.15.13'
  GCLOUD_KEY: ${{ secrets.GCLOUD_KEY }}
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  CLUSTER_ZONE: ${{ secrets.CLUSTER_ZONE }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ES_USER: ${{ secrets.ES_USER }}
  ES_PASS: ${{ secrets.ES_PASS }}
  MAIN_ES_IP: ${{ secrets.MAIN_ES_IP }}
  TD_QUEUE_NAME: ${{ secrets.TD_QUEUE_NAME }}
  TD_QUEUE_ZONE: ${{ secrets.TD_QUEUE_ZONE }}
  DUMP_QUEUE_NAME: ${{ secrets.DUMP_QUEUE_NAME }}
  DUMP_QUEUE_ZONE: ${{ secrets.DUMP_QUEUE_ZONE }}

# Trigger the workflow on all pull requests, and on push to specific branches
on:
  # run for all pull requests and pushes to certain branches
  pull_request:
  push:
    branches:
      - staging
      - trying

jobs:
  ## stage 2: next run docker push, as system tests rely on this
  dockerpush:
    # only run on push, not on pull_request
    # note that this does NOT run on pushes to branch develop, see separate workflow file for that
    if: github.event_name == 'push'
    # should take 2-3 mins
    timeout-minutes: 7
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: push to dockerhub
        run: make dockerpush

  ## stage 3: finally run system tests in parallel if everything else passes
  systemtest-latenodes:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ github.event_name == 'push' }}
    needs:
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: late nodes system test
        run: make dockertest-late-nodes
  systemtest-mining:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ github.event_name == 'push' }}
    needs:
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: Sleep for 30 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '30s'
      - name: checkout
        uses: actions/checkout@v2
      - name: mining system test
        run: make dockertest-mining
  systemtest-blocks-remove-node:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ github.event_name == 'push' }}
    needs:
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: Sleep for 90 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '90s'
      - name: checkout
        uses: actions/checkout@v2
      - name: remove node test
        run: make dockertest-blocks-remove-node
  systemtest-blocks-add-node:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ github.event_name == 'push' }}
    needs:
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: Sleep for 150 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '150s'
      - name: checkout
        uses: actions/checkout@v2
      - name: blocks add node test
        run: make dockertest-blocks-add-node
  systemtest-p2p:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ github.event_name == 'push' }}
    needs:
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: Sleep for 210 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '210s'
      - name: checkout
        uses: actions/checkout@v2
      - name: p2p system test
        run: make dockertest-p2p
  systemtest-sync:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ github.event_name == 'push' }}
    needs:
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: Sleep for 270 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '270s'
      - name: checkout
        uses: actions/checkout@v2
      - name: sync system test
        run: make dockertest-sync
  systemtest-hare:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ github.event_name == 'push' }}
    needs:
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: Sleep for 330 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '330s'
      - name: checkout
        uses: actions/checkout@v2
      - name: hare system test
        run: make dockertest-hare
  systemtest-tortoise-beacon:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ github.event_name == 'push' }}
    needs:
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: Sleep for 330 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '330s'
      - name: checkout
        uses: actions/checkout@v2
      - name: tortoise beacon system test
        run: make dockertest-tortoise-beacon


  # this summary job is a shortcut that obviates the need to list every individual job in bors.toml
  # all tests that are required to pass before a bors merge must be listed here!
  ci-stage2:
    if: always() && github.event_name == 'push'
    needs:
      - systemtest-latenodes
      - systemtest-blocks-add-node
      - systemtest-blocks-remove-node
      - systemtest-mining
      - systemtest-p2p
      - systemtest-hare
      - systemtest-sync
      - systemtest-tortoise-beacon
    runs-on: ubuntu-latest
    env:
      status: ${{ (needs.systemtest-latenodes.result == 'success' && needs.systemtest-blocks-add-node.result == 'success' && needs.systemtest-blocks-remove-node.result == 'success' && needs.systemtest-mining.result == 'success' && needs.systemtest-p2p.result == 'success' && needs.systemtest-hare.result == 'success' && needs.systemtest-sync.result == 'success' && needs.systemtest-tortoise-beacon.result == 'success') && 'success' || 'failure' }}
    steps:
      # print a single, clean status update to slack
      - uses: act10ns/slack@v1
        name: Slack notification
        with:
          status: ${{ env.status }}
      - name: Mark the job as succeeded
        if: env.status == 'success'
        run: exit 0
      - name: Mark the job as failed
        if: env.status != 'success'
        run: exit 1
