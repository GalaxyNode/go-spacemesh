// Code generated by fastssz. DO NOT EDIT.
package events

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/spacemeshos/go-spacemesh/common/types"
)

// MarshalSSZ ssz marshals the NewBlock object
func (n *NewBlock) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(n)
}

// MarshalSSZTo ssz marshals the NewBlock object to a target array
func (n *NewBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'ID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(n.ID)

	// Field (1) 'Layer'
	dst = ssz.MarshalUint32(dst, n.Layer)

	// Offset (2) 'Atx'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(n.Atx)

	// Field (0) 'ID'
	if len(n.ID) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(n.ID)...)

	// Field (2) 'Atx'
	if len(n.Atx) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(n.Atx)...)

	return
}

// UnmarshalSSZ ssz unmarshals the NewBlock object
func (n *NewBlock) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o2 uint64

	// Offset (0) 'ID'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Layer'
	n.Layer = ssz.UnmarshallUint32(buf[4:8])

	// Offset (2) 'Atx'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o0 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'ID'
	{
		buf = tail[o0:o2]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		n.ID = string(buf)
	}

	// Field (2) 'Atx'
	{
		buf = tail[o2:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		n.Atx = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the NewBlock object
func (n *NewBlock) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'ID'
	size += len(n.ID)

	// Field (2) 'Atx'
	size += len(n.Atx)

	return
}

// MarshalSSZ ssz marshals the DoneCreatingBlock object
func (d *DoneCreatingBlock) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DoneCreatingBlock object to a target array
func (d *DoneCreatingBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(9)

	// Field (0) 'Eligible'
	dst = ssz.MarshalBool(dst, d.Eligible)

	// Field (1) 'Layer'
	dst = ssz.MarshalUint32(dst, d.Layer)

	// Offset (2) 'Error'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.Error)

	// Field (2) 'Error'
	if len(d.Error) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(d.Error)...)

	return
}

// UnmarshalSSZ ssz unmarshals the DoneCreatingBlock object
func (d *DoneCreatingBlock) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 9 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'Eligible'
	d.Eligible = ssz.UnmarshalBool(buf[0:1])

	// Field (1) 'Layer'
	d.Layer = ssz.UnmarshallUint32(buf[1:5])

	// Offset (2) 'Error'
	if o2 = ssz.ReadOffset(buf[5:9]); o2 > size {
		return ssz.ErrOffset
	}

	// Field (2) 'Error'
	{
		buf = tail[o2:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		d.Error = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DoneCreatingBlock object
func (d *DoneCreatingBlock) SizeSSZ() (size int) {
	size = 9

	// Field (2) 'Error'
	size += len(d.Error)

	return
}

// MarshalSSZ ssz marshals the ValidBlock object
func (v *ValidBlock) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the ValidBlock object to a target array
func (v *ValidBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(5)

	// Offset (0) 'ID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(v.ID)

	// Field (1) 'Valid'
	dst = ssz.MarshalBool(dst, v.Valid)

	// Field (0) 'ID'
	if len(v.ID) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(v.ID)...)

	return
}

// UnmarshalSSZ ssz unmarshals the ValidBlock object
func (v *ValidBlock) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 5 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'ID'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Valid'
	v.Valid = ssz.UnmarshalBool(buf[4:5])

	// Field (0) 'ID'
	{
		buf = tail[o0:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		v.ID = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ValidBlock object
func (v *ValidBlock) SizeSSZ() (size int) {
	size = 5

	// Field (0) 'ID'
	size += len(v.ID)

	return
}

// MarshalSSZ ssz marshals the NewAtx object
func (n *NewAtx) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(n)
}

// MarshalSSZTo ssz marshals the NewAtx object to a target array
func (n *NewAtx) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'ID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(n.ID)

	// Field (1) 'EpochID'
	dst = ssz.MarshalUint32(dst, n.EpochID)

	// Field (0) 'ID'
	if len(n.ID) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(n.ID)...)

	return
}

// UnmarshalSSZ ssz unmarshals the NewAtx object
func (n *NewAtx) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'ID'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'EpochID'
	n.EpochID = ssz.UnmarshallUint32(buf[4:8])

	// Field (0) 'ID'
	{
		buf = tail[o0:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		n.ID = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the NewAtx object
func (n *NewAtx) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'ID'
	size += len(n.ID)

	return
}

// MarshalSSZ ssz marshals the ValidAtx object
func (v *ValidAtx) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the ValidAtx object to a target array
func (v *ValidAtx) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(5)

	// Offset (0) 'ID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(v.ID)

	// Field (1) 'Valid'
	dst = ssz.MarshalBool(dst, v.Valid)

	// Field (0) 'ID'
	if len(v.ID) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(v.ID)...)

	return
}

// UnmarshalSSZ ssz unmarshals the ValidAtx object
func (v *ValidAtx) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 5 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'ID'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Valid'
	v.Valid = ssz.UnmarshalBool(buf[4:5])

	// Field (0) 'ID'
	{
		buf = tail[o0:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		v.ID = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ValidAtx object
func (v *ValidAtx) SizeSSZ() (size int) {
	size = 5

	// Field (0) 'ID'
	size += len(v.ID)

	return
}

// MarshalSSZ ssz marshals the NewTx object
func (n *NewTx) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(n)
}

// MarshalSSZTo ssz marshals the NewTx object to a target array
func (n *NewTx) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(28)

	// Offset (0) 'ID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(n.ID)

	// Offset (1) 'Origin'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(n.Origin)

	// Offset (2) 'Destination'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(n.Destination)

	// Field (3) 'Amount'
	dst = ssz.MarshalUint64(dst, n.Amount)

	// Field (4) 'Fee'
	dst = ssz.MarshalUint64(dst, n.Fee)

	// Field (0) 'ID'
	if len(n.ID) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(n.ID)...)

	// Field (1) 'Origin'
	if len(n.Origin) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(n.Origin)...)

	// Field (2) 'Destination'
	if len(n.Destination) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(n.Destination)...)

	return
}

// UnmarshalSSZ ssz unmarshals the NewTx object
func (n *NewTx) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 28 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'ID'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Offset (1) 'Origin'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'Destination'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (3) 'Amount'
	n.Amount = ssz.UnmarshallUint64(buf[12:20])

	// Field (4) 'Fee'
	n.Fee = ssz.UnmarshallUint64(buf[20:28])

	// Field (0) 'ID'
	{
		buf = tail[o0:o1]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		n.ID = string(buf)
	}

	// Field (1) 'Origin'
	{
		buf = tail[o1:o2]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		n.Origin = string(buf)
	}

	// Field (2) 'Destination'
	{
		buf = tail[o2:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		n.Destination = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the NewTx object
func (n *NewTx) SizeSSZ() (size int) {
	size = 28

	// Field (0) 'ID'
	size += len(n.ID)

	// Field (1) 'Origin'
	size += len(n.Origin)

	// Field (2) 'Destination'
	size += len(n.Destination)

	return
}

// MarshalSSZ ssz marshals the ValidTx object
func (v *ValidTx) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the ValidTx object to a target array
func (v *ValidTx) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(5)

	// Offset (0) 'ID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(v.ID)

	// Field (1) 'Valid'
	dst = ssz.MarshalBool(dst, v.Valid)

	// Field (0) 'ID'
	if len(v.ID) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(v.ID)...)

	return
}

// UnmarshalSSZ ssz unmarshals the ValidTx object
func (v *ValidTx) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 5 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'ID'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Valid'
	v.Valid = ssz.UnmarshalBool(buf[4:5])

	// Field (0) 'ID'
	{
		buf = tail[o0:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		v.ID = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ValidTx object
func (v *ValidTx) SizeSSZ() (size int) {
	size = 5

	// Field (0) 'ID'
	size += len(v.ID)

	return
}

// MarshalSSZ ssz marshals the RewardReceived object
func (r *RewardReceived) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the RewardReceived object to a target array
func (r *RewardReceived) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Offset (0) 'Coinbase'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(r.Coinbase)

	// Field (1) 'Amount'
	dst = ssz.MarshalUint64(dst, r.Amount)

	// Offset (2) 'SmesherID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(r.SmesherID)

	// Field (0) 'Coinbase'
	if len(r.Coinbase) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(r.Coinbase)...)

	// Field (2) 'SmesherID'
	if len(r.SmesherID) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, r.SmesherID...)

	return
}

// UnmarshalSSZ ssz unmarshals the RewardReceived object
func (r *RewardReceived) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o2 uint64

	// Offset (0) 'Coinbase'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Amount'
	r.Amount = ssz.UnmarshallUint64(buf[4:12])

	// Offset (2) 'SmesherID'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o0 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Coinbase'
	{
		buf = tail[o0:o2]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		r.Coinbase = string(buf)
	}

	// Field (2) 'SmesherID'
	{
		buf = tail[o2:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		if cap(r.SmesherID) == 0 {
			r.SmesherID = make([]byte, 0, len(buf))
		}
		r.SmesherID = append(r.SmesherID, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the RewardReceived object
func (r *RewardReceived) SizeSSZ() (size int) {
	size = 16

	// Field (0) 'Coinbase'
	size += len(r.Coinbase)

	// Field (2) 'SmesherID'
	size += len(r.SmesherID)

	return
}

// MarshalSSZ ssz marshals the AtxCreated object
func (a *AtxCreated) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AtxCreated object to a target array
func (a *AtxCreated) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(9)

	// Field (0) 'Created'
	dst = ssz.MarshalBool(dst, a.Created)

	// Offset (1) 'ID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.ID)

	// Field (2) 'Epoch'
	dst = ssz.MarshalUint32(dst, a.Epoch)

	// Field (1) 'ID'
	if len(a.ID) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(a.ID)...)

	return
}

// UnmarshalSSZ ssz unmarshals the AtxCreated object
func (a *AtxCreated) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 9 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Created'
	a.Created = ssz.UnmarshalBool(buf[0:1])

	// Offset (1) 'ID'
	if o1 = ssz.ReadOffset(buf[1:5]); o1 > size {
		return ssz.ErrOffset
	}

	// Field (2) 'Epoch'
	a.Epoch = ssz.UnmarshallUint32(buf[5:9])

	// Field (1) 'ID'
	{
		buf = tail[o1:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		a.ID = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AtxCreated object
func (a *AtxCreated) SizeSSZ() (size int) {
	size = 9

	// Field (1) 'ID'
	size += len(a.ID)

	return
}

// MarshalSSZ ssz marshals the TortoiseBeaconCalculated object
func (t *TortoiseBeaconCalculated) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TortoiseBeaconCalculated object to a target array
func (t *TortoiseBeaconCalculated) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Field (0) 'Epoch'
	dst = ssz.MarshalUint32(dst, uint32(t.Epoch))

	// Offset (1) 'Beacon'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Beacon)

	// Field (1) 'Beacon'
	if len(t.Beacon) > 4096 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(t.Beacon)...)

	return
}

// UnmarshalSSZ ssz unmarshals the TortoiseBeaconCalculated object
func (t *TortoiseBeaconCalculated) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Epoch'
	t.Epoch = types.EpochID(ssz.UnmarshallUint32(buf[0:4]))

	// Offset (1) 'Beacon'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Beacon'
	{
		buf = tail[o1:]
		if len(buf) > 4096 {
			return ssz.ErrBytesLength
		}
		t.Beacon = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TortoiseBeaconCalculated object
func (t *TortoiseBeaconCalculated) SizeSSZ() (size int) {
	size = 8

	// Field (1) 'Beacon'
	size += len(t.Beacon)

	return
}
