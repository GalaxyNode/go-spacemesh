// Code generated by fastssz. DO NOT EDIT.
package peersync

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Request object
func (r *Request) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the Request object to a target array
func (r *Request) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ID'
	dst = ssz.MarshalUint64(dst, r.ID)

	return
}

// UnmarshalSSZ ssz unmarshals the Request object
func (r *Request) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 8 {
		return ssz.ErrSize
	}

	// Field (0) 'ID'
	r.ID = ssz.UnmarshallUint64(buf[0:8])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Request object
func (r *Request) SizeSSZ() (size int) {
	size = 8
	return
}

// MarshalSSZ ssz marshals the Response object
func (r *Response) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the Response object to a target array
func (r *Response) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ID'
	dst = ssz.MarshalUint64(dst, r.ID)

	// Field (1) 'Timestamp'
	dst = ssz.MarshalUint64(dst, r.Timestamp)

	return
}

// UnmarshalSSZ ssz unmarshals the Response object
func (r *Response) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 16 {
		return ssz.ErrSize
	}

	// Field (0) 'ID'
	r.ID = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Timestamp'
	r.Timestamp = ssz.UnmarshallUint64(buf[8:16])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Response object
func (r *Response) SizeSSZ() (size int) {
	size = 16
	return
}
