// Code generated by fastssz. DO NOT EDIT.
package activation

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/spacemeshos/go-spacemesh/common/types"
)

// MarshalSSZ ssz marshals the atxIDAndLayer object
func (a *atxIDAndLayer) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the atxIDAndLayer object to a target array
func (a *atxIDAndLayer) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'AtxID'
	dst = append(dst, a.AtxID[:]...)

	// Field (1) 'LayerID'
	if dst, err = a.LayerID.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the atxIDAndLayer object
func (a *atxIDAndLayer) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 36 {
		return ssz.ErrSize
	}

	// Field (0) 'AtxID'
	copy(a.AtxID[:], buf[0:32])

	// Field (1) 'LayerID'
	if err = a.LayerID.UnmarshalSSZ(buf[32:36]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the atxIDAndLayer object
func (a *atxIDAndLayer) SizeSSZ() (size int) {
	size = 36
	return
}

// MarshalSSZ ssz marshals the builderState object
func (b *builderState) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the builderState object to a target array
func (b *builderState) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(48)

	// Field (0) 'Challenge'
	dst = append(dst, b.Challenge[:]...)

	// Offset (1) 'NIPost'
	dst = ssz.WriteOffset(dst, offset)
	if b.NIPost == nil {
		b.NIPost = new(types.NIPost)
	}
	offset += b.NIPost.SizeSSZ()

	// Offset (2) 'PoetRound'
	dst = ssz.WriteOffset(dst, offset)
	if b.PoetRound == nil {
		b.PoetRound = new(types.PoetRound)
	}
	offset += b.PoetRound.SizeSSZ()

	// Offset (3) 'PoetServiceID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.PoetServiceID)

	// Offset (4) 'PoetProofRef'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.PoetProofRef)

	// Field (1) 'NIPost'
	if dst, err = b.NIPost.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'PoetRound'
	if dst, err = b.PoetRound.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'PoetServiceID'
	if len(b.PoetServiceID) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.PoetServiceID...)

	// Field (4) 'PoetProofRef'
	if len(b.PoetProofRef) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.PoetProofRef...)

	return
}

// UnmarshalSSZ ssz unmarshals the builderState object
func (b *builderState) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 48 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2, o3, o4 uint64

	// Field (0) 'Challenge'
	copy(b.Challenge[:], buf[0:32])

	// Offset (1) 'NIPost'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	// Offset (2) 'PoetRound'
	if o2 = ssz.ReadOffset(buf[36:40]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'PoetServiceID'
	if o3 = ssz.ReadOffset(buf[40:44]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'PoetProofRef'
	if o4 = ssz.ReadOffset(buf[44:48]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Field (1) 'NIPost'
	{
		buf = tail[o1:o2]
		if b.NIPost == nil {
			b.NIPost = new(types.NIPost)
		}
		if err = b.NIPost.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (2) 'PoetRound'
	{
		buf = tail[o2:o3]
		if b.PoetRound == nil {
			b.PoetRound = new(types.PoetRound)
		}
		if err = b.PoetRound.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'PoetServiceID'
	{
		buf = tail[o3:o4]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(b.PoetServiceID) == 0 {
			b.PoetServiceID = make([]byte, 0, len(buf))
		}
		b.PoetServiceID = append(b.PoetServiceID, buf...)
	}

	// Field (4) 'PoetProofRef'
	{
		buf = tail[o4:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(b.PoetProofRef) == 0 {
			b.PoetProofRef = make([]byte, 0, len(buf))
		}
		b.PoetProofRef = append(b.PoetProofRef, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the builderState object
func (b *builderState) SizeSSZ() (size int) {
	size = 48

	// Field (1) 'NIPost'
	if b.NIPost == nil {
		b.NIPost = new(types.NIPost)
	}
	size += b.NIPost.SizeSSZ()

	// Field (2) 'PoetRound'
	if b.PoetRound == nil {
		b.PoetRound = new(types.PoetRound)
	}
	size += b.PoetRound.SizeSSZ()

	// Field (3) 'PoetServiceID'
	size += len(b.PoetServiceID)

	// Field (4) 'PoetProofRef'
	size += len(b.PoetProofRef)

	return
}
