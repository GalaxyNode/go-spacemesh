// Code generated by fastssz. DO NOT EDIT.
package net

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the HandshakeData object
func (h *HandshakeData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the HandshakeData object to a target array
func (h *HandshakeData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(10)

	// Offset (0) 'ClientVersion'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(h.ClientVersion)

	// Field (1) 'NetworkID'
	dst = ssz.MarshalUint32(dst, h.NetworkID)

	// Field (2) 'Port'
	dst = ssz.MarshalUint16(dst, h.Port)

	// Field (0) 'ClientVersion'
	if len(h.ClientVersion) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(h.ClientVersion)...)

	return
}

// UnmarshalSSZ ssz unmarshals the HandshakeData object
func (h *HandshakeData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 10 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'ClientVersion'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'NetworkID'
	h.NetworkID = ssz.UnmarshallUint32(buf[4:8])

	// Field (2) 'Port'
	h.Port = ssz.UnmarshallUint16(buf[8:10])

	// Field (0) 'ClientVersion'
	{
		buf = tail[o0:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		h.ClientVersion = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the HandshakeData object
func (h *HandshakeData) SizeSSZ() (size int) {
	size = 10

	// Field (0) 'ClientVersion'
	size += len(h.ClientVersion)

	return
}
