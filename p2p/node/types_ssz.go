// Code generated by fastssz. DO NOT EDIT.
package node

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Info object
func (i *Info) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Info object to a target array
func (i *Info) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(40)

	// Field (0) 'ID'
	dst = append(dst, i.ID[:]...)

	// Offset (1) 'IP'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(i.IP)

	// Field (2) 'ProtocolPort'
	dst = ssz.MarshalUint16(dst, i.ProtocolPort)

	// Field (3) 'DiscoveryPort'
	dst = ssz.MarshalUint16(dst, i.DiscoveryPort)

	// Field (1) 'IP'
	if len(i.IP) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, i.IP...)

	return
}

// UnmarshalSSZ ssz unmarshals the Info object
func (i *Info) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 40 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'ID'
	copy(i.ID[:], buf[0:32])

	// Offset (1) 'IP'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	// Field (2) 'ProtocolPort'
	i.ProtocolPort = ssz.UnmarshallUint16(buf[36:38])

	// Field (3) 'DiscoveryPort'
	i.DiscoveryPort = ssz.UnmarshallUint16(buf[38:40])

	// Field (1) 'IP'
	{
		buf = tail[o1:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(i.IP) == 0 {
			i.IP = make([]byte, 0, len(buf))
		}
		i.IP = append(i.IP, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Info object
func (i *Info) SizeSSZ() (size int) {
	size = 40

	// Field (1) 'IP'
	size += len(i.IP)

	return
}
