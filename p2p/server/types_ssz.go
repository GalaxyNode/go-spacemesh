// Code generated by fastssz. DO NOT EDIT.
package server

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the response object
func (r *response) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the response object to a target array
func (r *response) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(r.Data)

	// Offset (1) 'ErrorStr'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(r.ErrorStr)

	// Field (0) 'Data'
	if len(r.Data) > 1024000 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, r.Data...)

	// Field (1) 'ErrorStr'
	if len(r.ErrorStr) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, []byte(r.ErrorStr)...)

	return
}

// UnmarshalSSZ ssz unmarshals the response object
func (r *response) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'Data'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Offset (1) 'ErrorStr'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'Data'
	{
		buf = tail[o0:o1]
		if len(buf) > 1024000 {
			return ssz.ErrBytesLength
		}
		if cap(r.Data) == 0 {
			r.Data = make([]byte, 0, len(buf))
		}
		r.Data = append(r.Data, buf...)
	}

	// Field (1) 'ErrorStr'
	{
		buf = tail[o1:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		r.ErrorStr = string(buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the response object
func (r *response) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'Data'
	size += len(r.Data)

	// Field (1) 'ErrorStr'
	size += len(r.ErrorStr)

	return
}
