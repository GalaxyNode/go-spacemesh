// Code generated by fastssz. DO NOT EDIT.
package discovery

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/spacemeshos/go-spacemesh/p2p/node"
)

// MarshalSSZ ssz marshals the response object
func (r *response) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the response object to a target array
func (r *response) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Nodes'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(r.Nodes); ii++ {
		offset += 4
		offset += r.Nodes[ii].SizeSSZ()
	}

	// Field (0) 'Nodes'
	if len(r.Nodes) > 300 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(r.Nodes)
		for ii := 0; ii < len(r.Nodes); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += r.Nodes[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(r.Nodes); ii++ {
		if dst, err = r.Nodes[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the response object
func (r *response) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Nodes'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (0) 'Nodes'
	{
		buf = tail[o0:]
		num, err := ssz.DecodeDynamicLength(buf, 300)
		if err != nil {
			return err
		}
		r.Nodes = make([]*node.Info, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if r.Nodes[indx] == nil {
				r.Nodes[indx] = new(node.Info)
			}
			if err = r.Nodes[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the response object
func (r *response) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Nodes'
	for ii := 0; ii < len(r.Nodes); ii++ {
		size += 4
		size += r.Nodes[ii].SizeSSZ()
	}

	return
}
