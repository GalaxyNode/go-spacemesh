// Code generated by fastssz. DO NOT EDIT.
package blocks

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/spacemeshos/go-spacemesh/common/types"
)

// MarshalSSZ ssz marshals the vrfMessage object
func (v *vrfMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the vrfMessage object to a target array
func (v *vrfMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'EpochBeacon'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(v.EpochBeacon)

	// Field (1) 'EpochNumber'
	dst = ssz.MarshalUint32(dst, uint32(v.EpochNumber))

	// Field (2) 'Counter'
	dst = ssz.MarshalUint32(dst, v.Counter)

	// Field (0) 'EpochBeacon'
	if len(v.EpochBeacon) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, v.EpochBeacon...)

	return
}

// UnmarshalSSZ ssz unmarshals the vrfMessage object
func (v *vrfMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'EpochBeacon'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'EpochNumber'
	v.EpochNumber = types.EpochID(ssz.UnmarshallUint32(buf[4:8]))

	// Field (2) 'Counter'
	v.Counter = ssz.UnmarshallUint32(buf[8:12])

	// Field (0) 'EpochBeacon'
	{
		buf = tail[o0:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(v.EpochBeacon) == 0 {
			v.EpochBeacon = make([]byte, 0, len(buf))
		}
		v.EpochBeacon = append(v.EpochBeacon, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the vrfMessage object
func (v *vrfMessage) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'EpochBeacon'
	size += len(v.EpochBeacon)

	return
}
