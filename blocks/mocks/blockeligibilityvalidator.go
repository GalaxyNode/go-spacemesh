// Code generated by MockGen. DO NOT EDIT.
// Source: ./blockeligibilityvalidator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockblockDB is a mock of blockDB interface
type MockblockDB struct {
	ctrl     *gomock.Controller
	recorder *MockblockDBMockRecorder
}

// MockblockDBMockRecorder is the mock recorder for MockblockDB
type MockblockDBMockRecorder struct {
	mock *MockblockDB
}

// NewMockblockDB creates a new mock instance
func NewMockblockDB(ctrl *gomock.Controller) *MockblockDB {
	mock := &MockblockDB{ctrl: ctrl}
	mock.recorder = &MockblockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockblockDB) EXPECT() *MockblockDBMockRecorder {
	return m.recorder
}

// GetBlock mocks base method
func (m *MockblockDB) GetBlock(ID types.BlockID) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", ID)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockblockDBMockRecorder) GetBlock(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockblockDB)(nil).GetBlock), ID)
}

// AddTortoiseBeacon mocks base method
func (m *MockblockDB) AddTortoiseBeacon(arg0 context.Context, arg1 types.EpochID, arg2 []byte, arg3 types.TortoiseBeacon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTortoiseBeacon", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTortoiseBeacon indicates an expected call of AddTortoiseBeacon
func (mr *MockblockDBMockRecorder) AddTortoiseBeacon(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTortoiseBeacon", reflect.TypeOf((*MockblockDB)(nil).AddTortoiseBeacon), arg0, arg1, arg2, arg3)
}

// GetTortoiseBeacon mocks base method
func (m *MockblockDB) GetTortoiseBeacon(arg0 context.Context, arg1 types.EpochID, arg2 []byte) (types.TortoiseBeacon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTortoiseBeacon", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.TortoiseBeacon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTortoiseBeacon indicates an expected call of GetTortoiseBeacon
func (mr *MockblockDBMockRecorder) GetTortoiseBeacon(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTortoiseBeacon", reflect.TypeOf((*MockblockDB)(nil).GetTortoiseBeacon), arg0, arg1, arg2)
}
