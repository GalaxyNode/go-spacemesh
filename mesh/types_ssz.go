// Code generated by fastssz. DO NOT EDIT.
package mesh

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ProcessedLayer object
func (p *ProcessedLayer) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the ProcessedLayer object to a target array
func (p *ProcessedLayer) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ID'
	if dst, err = p.ID.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Hash'
	dst = append(dst, p.Hash[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the ProcessedLayer object
func (p *ProcessedLayer) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 36 {
		return ssz.ErrSize
	}

	// Field (0) 'ID'
	if err = p.ID.UnmarshalSSZ(buf[0:4]); err != nil {
		return err
	}

	// Field (1) 'Hash'
	copy(p.Hash[:], buf[4:36])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ProcessedLayer object
func (p *ProcessedLayer) SizeSSZ() (size int) {
	size = 36
	return
}

// MarshalSSZ ssz marshals the DbTransaction object
func (d *DbTransaction) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DbTransaction object to a target array
func (d *DbTransaction) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Transaction'
	if dst, err = d.Transaction.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Origin'
	dst = append(dst, d.Origin[:]...)

	// Field (2) 'BlockID'
	dst = append(dst, d.BlockID[:]...)

	// Field (3) 'LayerID'
	if dst, err = d.LayerID.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the DbTransaction object
func (d *DbTransaction) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 160 {
		return ssz.ErrSize
	}

	// Field (0) 'Transaction'
	if err = d.Transaction.UnmarshalSSZ(buf[0:116]); err != nil {
		return err
	}

	// Field (1) 'Origin'
	copy(d.Origin[:], buf[116:136])

	// Field (2) 'BlockID'
	copy(d.BlockID[:], buf[136:156])

	// Field (3) 'LayerID'
	if err = d.LayerID.UnmarshalSSZ(buf[156:160]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DbTransaction object
func (d *DbTransaction) SizeSSZ() (size int) {
	size = 160
	return
}

// MarshalSSZ ssz marshals the dbReward object
func (d *dbReward) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the dbReward object to a target array
func (d *dbReward) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(40)

	// Field (0) 'TotalReward'
	dst = ssz.MarshalUint64(dst, d.TotalReward)

	// Field (1) 'LayerRewardEstimate'
	dst = ssz.MarshalUint64(dst, d.LayerRewardEstimate)

	// Offset (2) 'SmesherID'
	dst = ssz.WriteOffset(dst, offset)
	offset += d.SmesherID.SizeSSZ()

	// Field (3) 'Coinbase'
	dst = append(dst, d.Coinbase[:]...)

	// Field (2) 'SmesherID'
	if dst, err = d.SmesherID.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the dbReward object
func (d *dbReward) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 40 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'TotalReward'
	d.TotalReward = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'LayerRewardEstimate'
	d.LayerRewardEstimate = ssz.UnmarshallUint64(buf[8:16])

	// Offset (2) 'SmesherID'
	if o2 = ssz.ReadOffset(buf[16:20]); o2 > size {
		return ssz.ErrOffset
	}

	// Field (3) 'Coinbase'
	copy(d.Coinbase[:], buf[20:40])

	// Field (2) 'SmesherID'
	{
		buf = tail[o2:]
		if err = d.SmesherID.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the dbReward object
func (d *dbReward) SizeSSZ() (size int) {
	size = 40

	// Field (2) 'SmesherID'
	size += d.SmesherID.SizeSSZ()

	return
}
