// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockconservativeState is a mock of conservativeState interface.
type MockconservativeState struct {
	ctrl     *gomock.Controller
	recorder *MockconservativeStateMockRecorder
}

// MockconservativeStateMockRecorder is the mock recorder for MockconservativeState.
type MockconservativeStateMockRecorder struct {
	mock *MockconservativeState
}

// NewMockconservativeState creates a new mock instance.
func NewMockconservativeState(ctrl *gomock.Controller) *MockconservativeState {
	mock := &MockconservativeState{ctrl: ctrl}
	mock.recorder = &MockconservativeStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconservativeState) EXPECT() *MockconservativeStateMockRecorder {
	return m.recorder
}

// AddToCache mocks base method.
func (m *MockconservativeState) AddToCache(tx *types.Transaction, newTX bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCache", tx, newTX)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCache indicates an expected call of AddToCache.
func (mr *MockconservativeStateMockRecorder) AddToCache(tx, newTX interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCache", reflect.TypeOf((*MockconservativeState)(nil).AddToCache), tx, newTX)
}

// AddressExists mocks base method.
func (m *MockconservativeState) AddressExists(arg0 types.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressExists indicates an expected call of AddressExists.
func (mr *MockconservativeStateMockRecorder) AddressExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressExists", reflect.TypeOf((*MockconservativeState)(nil).AddressExists), arg0)
}

// HasTx mocks base method.
func (m *MockconservativeState) HasTx(arg0 types.TransactionID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTx", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTx indicates an expected call of HasTx.
func (mr *MockconservativeStateMockRecorder) HasTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTx", reflect.TypeOf((*MockconservativeState)(nil).HasTx), arg0)
}
