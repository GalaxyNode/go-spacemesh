// Code generated by fastssz. DO NOT EDIT.
package pendingtxs

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the NanoTx object
func (n *NanoTx) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(n)
}

// MarshalSSZTo ssz marshals the NanoTx object to a target array
func (n *NanoTx) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Amount'
	dst = ssz.MarshalUint64(dst, n.Amount)

	// Field (1) 'Fee'
	dst = ssz.MarshalUint64(dst, n.Fee)

	// Field (2) 'HighestLayerIncludedIn'
	if dst, err = n.HighestLayerIncludedIn.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the NanoTx object
func (n *NanoTx) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 20 {
		return ssz.ErrSize
	}

	// Field (0) 'Amount'
	n.Amount = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Fee'
	n.Fee = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'HighestLayerIncludedIn'
	if err = n.HighestLayerIncludedIn.UnmarshalSSZ(buf[16:20]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the NanoTx object
func (n *NanoTx) SizeSSZ() (size int) {
	size = 20
	return
}
